<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on GoniGoni!</title>
    <link>/posts/</link>
    <description>Recent content in Posts on GoniGoni!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 06 Aug 2023 18:00:00 +0900</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2023년 하반기 이직 후기</title>
      <link>/posts/move-2023/</link>
      <pubDate>Sun, 06 Aug 2023 18:00:00 +0900</pubDate>
      
      <guid>/posts/move-2023/</guid>
      <description>2022년 펜타포트 락 페스티벌에서 찍은 &amp;lsquo;퇴사&amp;rsquo; 깃발. 퇴사 기념 짤로 쓰고 싶었는데 실패했네요. (이 깃발은 올해에도 등장했습니다)
회사 상황이 어려워져서 재직 중이던 회사를 떠나게 되었습니다. 이에 의도하지 않은 이직을 하게 되었는데요. 조금 급하게 이직을 한 감이 있지만, 그 과정을 돌아보려고 합니다. 그리고 앞으로 어떻게 커리어를 이어 나갈지에 대해 고민한 내용도 이야기 해 보고자 합니다.
요약 금번 이직 과정을 정리한 구글 시트. 회사명과 담당자(리크루터, 헤드헌터, 자체 지원)는 숨김 처리 하였습니다.</description>
    </item>
    
    <item>
      <title>EKS에 올린 Spring Boot 애플리케이션에 IAM Role 연결하기</title>
      <link>/posts/springboot-iam-role/</link>
      <pubDate>Sat, 27 May 2023 22:10:18 +0900</pubDate>
      
      <guid>/posts/springboot-iam-role/</guid>
      <description>최근 EKS에 Spring Boot 애플리케이션을 올렸는데, ServiceAccount에 IAM Role을 연결했음에도 AWS API를 호출하지 못하는 문제가 있었습니다. 이 문제를 해결하기 위해 테스트 한 과정을 남겨보려고 합니다.
우선, AWS의 Java 버전 SDK는 부여된 권한을 어떻게 찾는지 알아보겠습니다. 따로 설정을 하지 않았다면, 아래와 같은 순서로 찾습니다.
Java의 시스템 properties 환경 변수 AWS의 STS(Security Token Service)로 부터 얻은 Web Identity Token 공유된 credentials, config 파일: 별도의 설정이 없으면 default 프로필을 이용 ECS 컨테이너 credentials EC2 인스턴스에 부여된 IAM Role 그리고 EKS의 IAM Roles for Service Accounts(이후 IRSA로 표기) 기능은 STS(Security Token Service)의 AssumeRoleWithWebIdentity API 호출을 통해 권한을 얻습니다.</description>
    </item>
    
    <item>
      <title>런던 음반 매장 여행기</title>
      <link>/posts/london-record-stores/</link>
      <pubDate>Sun, 16 Apr 2023 22:06:50 +0900</pubDate>
      
      <guid>/posts/london-record-stores/</guid>
      <description>최근에 런던 여행을 다녀 왔습니다. 이번 런던 여행은 두 가지 목적이 있었습니다. 첫번째는 프리미어 리그를 보러 가는 것이었고, 두번째는 음반 가게를 구경하며 제가 갖고 싶었던 것들을 구해오는 것이 목표였습니다. 마침 제가 여행을 다녀온 주에 토트넘과 브라이튼의 경기가 있어서 관람했는데요. 그 경기에서 손흥민 선수가 프리미어 리그 100번째 골을 넣었죠. 이번 이야기는 두번째 목표를 이루기 위해 떠난 여정을 설명드리고자 합니다.
사실 런던에는 정말 많은 음반 매장이 있고, 이걸 모두 설명해 드리는 데는 한계가 있을 것입니다.</description>
    </item>
    
    <item>
      <title>Terraform Workspaces 기능 정리</title>
      <link>/posts/terraform-workspaces/</link>
      <pubDate>Sun, 19 Mar 2023 17:21:21 +0900</pubDate>
      
      <guid>/posts/terraform-workspaces/</guid>
      <description>Terraform에서 개발/운영 환경을 나누기 위해, 폴더/디렉터리를 이용할 때가 있습니다. 하지만 이런 상황도 있죠.
개발/운영 환경 내 staging/QA 환경이 필요한 경우 테스트를 위해 임시 인프라 구성이 필요한 경우 위와 같은 상황에 대응하기 위해, Terraform에서는 Workspaces 라는 기능을 지원합니다. 이번에는 Terraform의 Workspaces 기능은 무엇인지, 어떻게 사용하면 되는지 알아보려고 합니다.
Workspaces를 사용하려면? Terraform에서 관리하는 리소스 상태는 backend에 저장합니다. 이러한 데이터는 하나의 workspace에 속합니다. 기본적으로 이런 리소스 상태는 default workspace에 들어 있습니다. 몇몇 backend는 여러 개의 workspace를 지원하며, 하나의 설정과 연결된 여러 상태를 저장할 수 있습니다.</description>
    </item>
    
    <item>
      <title>2022년 회고 - 팀 운영 후기</title>
      <link>/posts/retrospect-2022/</link>
      <pubDate>Sat, 24 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>/posts/retrospect-2022/</guid>
      <description>2022년은 우여곡절이 있었던 해였습니다. 주변의 여러 상황 때문에 팀 리더라는 직책을 맡게 되었습니다. 사실 재직 중인 회사에 입사하면서 고려했던 부분은 아니었습니다. 지난 회사에서도 팀 빌딩 경험이 있다 보니, 이번에는 피하고 싶다는 생각이 있었기 때문입니다. 그렇지만, 회사 생활이라는 것이 제 마음대로 되는 게 아니더라구요. 다행히 제가 요청한 대로 TO가 나왔고, 계획에 맞게 인원을 뽑을 수 있었습니다. 올해 회고는, 1인 팀에서 세 명으로 팀을 키운 이야기, 그리고 이를 바탕으로 1년 간 팀을 운영했던 이야기를 해 보고자 합니다.</description>
    </item>
    
    <item>
      <title>책 리뷰 - 구글 엔지니어는 이렇게 일한다</title>
      <link>/posts/engineering-at-google/</link>
      <pubDate>Tue, 20 Sep 2022 22:16:34 +0900</pubDate>
      
      <guid>/posts/engineering-at-google/</guid>
      <description>(개인 사비로 책을 구매 후 작성하였습니다.)
최근에 개발자 분들 뿐만 아니라 개발자가 아닌 분들도 많이 읽으시는 &amp;quot;구글 엔지니어는 이렇게 일한다(원제: Engineering at Google)&amp;quot; 를 읽고 느낀 점들을 이야기 해 보고자 합니다.
나무위키에 따르면, 구글은 1998년에 설립되어 24년이 넘은 회사입니다. 그만큼 많은 엔지니어들이 대규모의 서비스를 구축하고 운영한 역사가 있고, 이러한 과정에서 배운 것들이 아주 많을 것입니다.
최근 저의 경험을 돌이켜 보면, 사수가 없이 일하는 경우가 많았습니다. 그리고 지금은 제가 작은 팀을 이끌어야 하는 상황이 되었네요.</description>
    </item>
    
    <item>
      <title>eksctl로 생성한 EKS 클러스터의 리소스 살펴 보기</title>
      <link>/posts/eks-resources-with-eksctl/</link>
      <pubDate>Sun, 17 Jul 2022 21:45:26 +0900</pubDate>
      
      <guid>/posts/eks-resources-with-eksctl/</guid>
      <description>AWS에서 Kubernetes를 사용하려면 여러 방법이 있겠지만, 가장 편한 방법은 EKS 서비스를 이용하는 것이죠. EKS 클러스터를 생성하는 방법은 여러 가지가 있는데요. 이번 글에서는 eksctl이라는 프로그램을 이용해서 EKS 클러스터를 생성하는 방법을 알아보고, 어떤 리소스를 생성하는지 알아보려고 합니다.
먼저 Kubernetes 클러스터의 구조를 알아보고, EKS에서는 어떤 차이점이 있는지 알아 보겠습니다.
Kubernetes 클러스터의 구조와 EKS Kubernetes 클러스터는 다음과 같이 구성되어 있습니다.
출처: kubernetes.io
노드(Node): 컨테이너 내의 애플리케이션을 실행하는 서버들의 집합으로, 파드(Pod)는 워커 노드에서 동작합니다. 앞으로 노드 또는 워커 노드라는 말이 계속 등장할텐데, 똑같은 것으로 이해해 주시면 됩니다.</description>
    </item>
    
    <item>
      <title>AWS Certified Solutions Architect - Professional 시험 후기</title>
      <link>/posts/aws-sap-c01/</link>
      <pubDate>Wed, 11 May 2022 23:14:04 +0900</pubDate>
      
      <guid>/posts/aws-sap-c01/</guid>
      <description>계기 저는 2년 전에 AWS의 Certified Solutions Architect - Associate 자격증을 취득한 적이 있습니다. 언젠가는 다음 단계의 자격증을 취득할 생각이 있긴 했습니다. (다음 자격증 시험에 응시할 때 50% 할인 쿠폰이 크긴 하더라구요)
그러다가 작년 하반기에 이직을 하였고, 최근 몇 개월 동안 현재 시스템을 분석하고 개선하는 작업들을 진행했습니다. 저희 팀은 지금의 시스템을 운영하고, 다음 버전의 시스템을 구축하여야 하는 과제가 있는데요. 그 과정에서 시스템을 구축하고 운영하는 데 좀 더 많은 지식이 필요하겠다는 생각이 들었습니다.</description>
    </item>
    
    <item>
      <title>2021년 회고 - 이직 후기</title>
      <link>/posts/retrospect-2021/</link>
      <pubDate>Fri, 31 Dec 2021 21:00:00 +0900</pubDate>
      
      <guid>/posts/retrospect-2021/</guid>
      <description>원래는 2 편의 글로 2021년을 마무리하려고 했습니다. 다른 글에서는 제가 올 해 겪었던 일들을 써 보려고 했었어요.
예를 들어 작년 10월에 촬영했었던 This is My Architecture 영상이 공개되었다거나, 매월 블로그에 글 하나씩 쓰는 것을 목표로 했는데 목표를 달성했다거나, 낮에는 개발하고 밤에는 복면 쓰고 락 밴드를 하는 사람들을 소재로 소설을 쓰려고 했는데 반 정도만 쓰고 말았다거나, 장롱면허여서 운전 연수를 받았다거나, &amp;hellip; 아무튼 여러 일들이 있었습니다.
그러다가 &amp;lsquo;시시콜콜한 이야기를 하는 게 무슨 의미가 있나?</description>
    </item>
    
    <item>
      <title>Terraform vs Pulumi</title>
      <link>/posts/terraform-vs-pulumi/</link>
      <pubDate>Sat, 20 Nov 2021 10:30:24 +0900</pubDate>
      
      <guid>/posts/terraform-vs-pulumi/</guid>
      <description>클라우드 환경 내 인프라 구성이 복잡할수록 IaC(Infrastructure as Code) 툴을 고민하게 되는데요. 물론 AWS의 CloudFormation과 같이 클라우드 벤더가 제공하는 서비스가 있지만, 앞으로는 특정 벤더에 종속되는 것을 피하고 싶다는 생각이 들었습니다.
그러다가 알아본 툴 중에 Terraform과 Pulumi가 있는데요. Terraform은 저도 개인적으로 사용해 본 적이 있었고, Pulumi는 익숙한 개발 언어(Python, TypeScript, Golang, &amp;hellip;)로 인프라 구성을 구축할 수 있다고 해서 관심을 갖게 되었습니다.
이번 글에서는 AWS에서 EC2, S3 Bucket, IAM Policy, Role 정도를 만드는 정도로 테스트해 보겠습니다.</description>
    </item>
    
    <item>
      <title>Python에서 logging으로 로그 만들기</title>
      <link>/posts/python-logging/</link>
      <pubDate>Sun, 31 Oct 2021 10:58:31 +0900</pubDate>
      
      <guid>/posts/python-logging/</guid>
      <description>프로그램이 잘 동작하는 지 확인하고 싶다면, print()를 쓸 때가 많습니다. 하지만 프로그램이 복잡하게 바뀌면서 print()만으로는 감당하기 어려운 상황이 발생합니다.
그럴 때 어떻게 로그를 만들고 관리할 지를 고민하게 되는데요. 이번 글에서는 Python에서 logging 모듈을 활용해서 어떻게 로그를 관리할 수 있는지 살펴보려고 합니다.
기본적인 로깅 만들기 logging 모듈을 이용해서 로그를 만드는 방법은 다음과 같습니다.
import logging logging.critical(&amp;#39;Critical log&amp;#39;) logging.error(&amp;#39;Error log&amp;#39;) logging.warning(&amp;#39;Warning log&amp;#39;) logging.info(&amp;#39;Info log&amp;#39;) logging.debug(&amp;#39;Debug log&amp;#39;) 스크립트를 실행해 보면 다음과 같이 표시됩니다.</description>
    </item>
    
    <item>
      <title>AWS Session Manager &amp; Run Command로 외부에서 쉘 스크립트 실행하기</title>
      <link>/posts/aws-session-manager-run-command/</link>
      <pubDate>Thu, 30 Sep 2021 14:38:05 +0900</pubDate>
      
      <guid>/posts/aws-session-manager-run-command/</guid>
      <description>AWS의 Systems Manager에는 Run Command와 Session Manager라는 기능이 있습니다.
SSH를 이용하여 EC2 인스턴스에 접근할 때는 SSH 키 페어가 필요하고, SSH 접속을 위한 보안 그룹을 열어야 하는데요. 위 기능을 이용하면 이러한 과정을 생략하고 원격에서 EC2 인스턴스에 접근하여 명령을 실행할 수 있습니다.
먼저, Session Manager로 웹 브라우저에서 쉘을 실행하는 방법부터 설명드리겠습니다.
Session Manager로 웹 브라우저에서 쉘 실행하기 Session Manager로 웹 브라우저에서 쉘을 실행하려면, EC2 인스턴스가 Systems Manager와 관련된 작업을 실행할 수 있는 권한을 부여해야 합니다.</description>
    </item>
    
    <item>
      <title>CloudFormation과 SAM을 쓰면서 겪었던 일들 모음</title>
      <link>/posts/cloudformation-sam-tmi/</link>
      <pubDate>Sat, 28 Aug 2021 15:51:33 +0900</pubDate>
      
      <guid>/posts/cloudformation-sam-tmi/</guid>
      <description>최근 인프라 구성을 CloudFormation을 이용해서 조정해 보았습니다. 그 과정에서 여러 Lambda 함수를 쓸 때는 SAM으로, 그 외의 경우는 CloudFormation을 사용했는데요.
이번 작업으로 여러 CloudFormation 스택에 흩어져 있던 리소스를 하나로 모으고, 템플릿의 관리 방식도 좀 더 관리하게 편하도록 설정할 수 있게 되었습니다.
저희 팀이 여러 IaC(Infrastructure as Code) 툴 중에 왜 SAM과 CloudFormation을 사용하는 이유는 이 문서를 참고해 주세요.
이번 글은 CloudFormation과 SAM을 쓰면서 겪었던 일들을 정리해 보려고 합니다.
SAM에서 API Gateway 정의를 SAM Template에 넣기 SAM에서 제공하는 AWS::Serverless::Api 리소스는 AWS Gateway의 REST API를 생성해 주는 기능입니다.</description>
    </item>
    
    <item>
      <title>EKS 내 NGINX Ingress에서 NLB와 ACM 연동 방법 살펴보기</title>
      <link>/posts/eks-nlb-acm-test/</link>
      <pubDate>Sat, 31 Jul 2021 20:08:14 +0900</pubDate>
      
      <guid>/posts/eks-nlb-acm-test/</guid>
      <description>최근 팀 내에서 외부 서비스와 연동하는 서비스가 증가하면서, 고정된 IP 주소를 요청하는 경우가 많아졌습니다.
한편, 대외 서비스가 늘어나다 보니 관리하는 서버의 수가 증가하였습니다. 그렇지만 생각보다 트래픽이 많지 않아 리소스가 낭비되는 경우가 많은데요.
이러한 상황을 겪으면서 서버의 수를 줄이고, 서비스마다 고정된 IP 주소를 제공할 방법을 찾아보게 되었습니다.
그러다가 Kubernetes와 Kubernetes의 Ingress를 적절히 활용하여 이러한 요건을 충족하는 방법을 찾아보았습니다.
이번 글은 그 과정에서 겪었던 이슈를 정리하기 위해 작성하였습니다.
EKS와 NGINX Ingress Controller 사용 저희 팀의 웹 서비스들은 Elastic Beanstalk를 주로 이용하고 있습니다.</description>
    </item>
    
    <item>
      <title>Boto3를 쓰면서 겪었던 일들 모음</title>
      <link>/posts/boto3-note/</link>
      <pubDate>Mon, 28 Jun 2021 22:34:04 +0900</pubDate>
      
      <guid>/posts/boto3-note/</guid>
      <description>Python을 이용해서 AWS의 여러 기능을 자동화 할 때 Boto3를 많이들 쓰실 것 같은데요. 이번 달에는 Boto3를 쓰면서 궁금했던 것, 또는 자주 사용할 만한 것들을 정리해 보려고 합니다.
현재 사용 중인 AWS 계정 ID 얻기 여기서 계정 ID라고 하면, 12자리의 숫자로 구성된 계정의 ID를 의미합니다.
import boto3 account_id = boto3.client(&amp;#39;sts&amp;#39;).get_caller_identity().get(&amp;#39;Account&amp;#39;) 출처: Stack Overflow
에러 다루기 출처: Boto3 Documentation
Boto3의 코드를 열어보면, 서비스에 따라 발생할 수 있는 모든 에러를 저장하고 있지 않습니다. Boto3와 AWS CLI의 기반이 되는 Botocore 프로젝트의 코드에서도 모든 종류의 예외를 다루지 않습니다.</description>
    </item>
    
    <item>
      <title>Open Badges 소개</title>
      <link>/posts/open-badges-introduction/</link>
      <pubDate>Sat, 01 May 2021 12:55:57 +0900</pubDate>
      
      <guid>/posts/open-badges-introduction/</guid>
      <description>저는 초등학생 때 아람단에 가입해서 이런저런 활동들을 해 봤는데요. 열심히 활동하는 편은 아니었지만, 뭔가 활동을 하면 배지를 얻을 수 있었습니다. 적극적으로 활동하는 친구들은 아람단 단복에 정말 많은 배지들을 달고 있었던 기억이 납니다.
이러한 배지 시스템은 스마트 폰의 앱이나 웹 사이트에서도 볼 수 있습니다. 예를 들어 제가 운동할 때 사용하는 앱 중 하나인 Nike Training Club은 특정한 조건을 달성하면 새로운 기록을 만들 수 있는데요.
아래는 Nike Training Club 앱에서 제가 달성한 기록들 중 일부입니다.</description>
    </item>
    
    <item>
      <title>데이터 분석 워크플로우를 처음부터 만들어 보기 (2)</title>
      <link>/posts/data-workflow-from-scratch-2/</link>
      <pubDate>Mon, 26 Apr 2021 21:20:19 +0900</pubDate>
      
      <guid>/posts/data-workflow-from-scratch-2/</guid>
      <description>2월에 올렸던 데이터 분석 워크플로우를 처음부터 만들어 보기에 이어서 작성하는 두번째 글입니다.
그동안 시도해 봤던 것들은 다음과 같습니다.
S3 버킷에 원격으로 로그 올리도록 설정하기 Airflow 2.x 버전에서 KubernetesExecutor를 사용하는 데, DAG이나 Task를 수동으로 실행할 때 에러가 발생하는 이유는? DAG에서 DB 이용하기: DB와 관련된 Operator 이용하기, Hooks 이용하기 S3에서 파일을 가져와서 분석하기: S3Hook 테스트 한 환경은 Airflow 2.0.1, 2.0.2 버전입니다.
전체 내용은 GitHub 저장소에서 확인하실 수 있습니다.
S3 버킷에 원격으로 로그를 올리도록 설정하기 지난 글에서 시스템 구성으로 KubernetesExecutor를 이용한다고 말씀드렸습니다.</description>
    </item>
    
    <item>
      <title>Locust 1.0 이후 달라진 점들 요약</title>
      <link>/posts/locust-update/</link>
      <pubDate>Tue, 30 Mar 2021 21:53:01 +0900</pubDate>
      
      <guid>/posts/locust-update/</guid>
      <description>작년 이맘때에 AWSKRUG에서 ECS+Locust로 부하 테스트 진행하기라는 주제로 발표를 한 적이 있었습니다.
그러다가 5월에 Locust 1.0 버전이 나왔는데요. 최신 버전의 Locust로 부하 테스트를 진행하다 보니 바뀐 부분이 많아서, 새 버전으로 테스트를 수행하기 위해 필요한 내용 위주로 다시 정리해 보려고 합니다.
이 글은 위에 링크한 슬라이드 중 11~19 페이지의 내용을 대체합니다. 지금부터 한 번 살펴보겠습니다.
Locust -&amp;gt; User 클래스 이름 변경 한 명의 사용자를 표현하는 Locust 클래스가 &amp;lsquo;User&amp;rsquo;로 이름을 바꾸었습니다. HTTP를 이용하는 클라이언트는 HttpLocust에서 HttpUser로 클래스 이름을 바꾸었습니다.</description>
    </item>
    
    <item>
      <title>데이터 분석 워크플로우를 처음부터 만들어 보기</title>
      <link>/posts/data-workflow-from-scratch/</link>
      <pubDate>Mon, 01 Mar 2021 17:00:00 +0900</pubDate>
      
      <guid>/posts/data-workflow-from-scratch/</guid>
      <description>지난 달에는 데이터 수집을 위한 환경 구성을 처음부터 만들어 보았습니다. 어느 정도 초기 환경을 구축했다고 판단해서, 이번에는 데이터 분석을 위한 워크플로우를 처음부터 만들어 보는 과정을 기록해 보려고 합니다.
이번에는 Apache Airflow를 이용해서 데이터 분석 작업을 위한 환경을 구축해 보았습니다. 여러 곳에서 Airflow를 사용하는 사례를 듣다 보니, Airflow를 한번 써 봐야겠다고 생각했습니다. 최근에는 AWS에서도 Managed Workflows for Apache Airflow라는 관리형 서비스를 제공하고 있고, GCP에서는 Cloud Composer라는 이름으로 관리형 서비스를 제공하고 있습니다.</description>
    </item>
    
    <item>
      <title>데이터 수집 단계를 처음부터 구현해 보기</title>
      <link>/posts/collecting-data-from-scratch/</link>
      <pubDate>Sun, 24 Jan 2021 19:36:57 +0900</pubDate>
      
      <guid>/posts/collecting-data-from-scratch/</guid>
      <description>2021년에는 매월 최소한 글 한 편은 블로그에 올려야겠다고 생각했습니다. 그 달에 공부했던 것, 새로 알게 된 것들을 주로 정리해서 올릴 예정입니다.
이번 달은 &amp;lsquo;데이터 수집 단계를 처음부터 구현해 보기&amp;rsquo; 라는 주제로 테스트 해 본 것들을 정리해 보겠습니다.
왜 이 일을 하게 되었나? 지금 제가 회사에서 하는 일은 학생의 학습 데이터를 수집하고 분석하는 인프라를 구축/운영하는 것입니다. 3년 간 AWS를 기반으로 여러 서비스들을 운영해 보면서, &amp;lsquo;만약 AWS를 쓰지 않는 환경이라면, 어떻게 시스템 구축을 할 것인가?</description>
    </item>
    
    <item>
      <title>2020년 회고</title>
      <link>/posts/retrospect-2020/</link>
      <pubDate>Thu, 31 Dec 2020 15:40:13 +0900</pubDate>
      
      <guid>/posts/retrospect-2020/</guid>
      <description>2020년을 되돌아보면, 코로나로 일상 생활에 변화가 많았습니다. 제 생활에 가장 큰 변화라면, 퀸 내한공연 이후로 밴드들 공연을 현장에서 못 봤던 것, 축구 경기 직관을 제대로 못 했던 것, 오프라인 컨퍼런스나 국외 출장들이 모두 취소된 것을 들 수 있겠네요. 이외에도 여러가지 일들이 있었는데, 한 번 뒤돌아 보는 시간을 가져보려고 합니다.
다른 사람들 앞에 서는 일 오프라인 컨퍼런스나 모임들이 많이 취소되었습니다. 그래서 온라인 모임이나 컨퍼런스에서 발표했던 적이 있었는데요. 아직 공개되지 않은 것들을 제외하고 말씀드리면, 두 번 발표를 진행했습니다.</description>
    </item>
    
    <item>
      <title>Python의 map() filter() reduce() 사용 방법 정리</title>
      <link>/posts/python-map-reduce-filter/</link>
      <pubDate>Sat, 28 Nov 2020 13:13:35 +0900</pubDate>
      
      <guid>/posts/python-map-reduce-filter/</guid>
      <description>가끔씩 Python의 map(), filter(), reduce()에 대해 헷갈리는 것들이 있어서 정리해 본다.
map(function, iterable, &amp;hellip;) Reference: Python 문서 참조 iterable에 있는 모든 요소에 function을 적용하여 그 결과를 반환한다. function은 여러 인자를 받을 수 있어야 하고, 모든 iterable의 아이템에 동시에 적용되도록 해야 한다.
&amp;gt;&amp;gt;&amp;gt; l1 = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; map(lambda x: x * 2, l1) &amp;lt;map object at 0x1006d1040&amp;gt; map()을 수행한 결과는 map object로 반환되므로, 이를 list나 tuple로 바꾸는 작업이 필요하다.</description>
    </item>
    
    <item>
      <title>SimCity 백업 프로그램을 Go로 포팅하기</title>
      <link>/posts/porting-simcity-backup-to-golang/</link>
      <pubDate>Mon, 19 Oct 2020 20:44:49 +0900</pubDate>
      
      <guid>/posts/porting-simcity-backup-to-golang/</guid>
      <description>어릴적부터 도시를 짓는 게임을 좋아했습니다. 예전에 심시티 3000을 제 돈 주고 산 걸로 시작해서, 심시티 4를 거쳐 지금은 시티즈 스카이라인을 가끔씩 플레이합니다.
예전에 쓰던 컴퓨터에서 심시티 4를 돌릴 때 외부에서 받은 건물이나, 제가 만든 도시, 그리고 스크린샷을 백업하는 프로그램을 파이썬으로 만든 적이 있었습니다.
그러다가 이 프로그램을 Go로 포팅하는 일을 해 보고 싶어서 시도해 보게 되었습니다.
파일 목록을 검색하고 파일을 쓰고 읽는 부분들이 많아서, 개인적으로는 해 볼 만한 내용이었다고 생각합니다.
그러면 어떤 차이가 있는지 한 번 살펴보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>AWS SAM에서 중첩된 스택 배포 시 유의해야 할 것들</title>
      <link>/posts/aws-sam-nested-stack/</link>
      <pubDate>Mon, 29 Jun 2020 20:58:17 +0900</pubDate>
      
      <guid>/posts/aws-sam-nested-stack/</guid>
      <description>팀에서 AWS SAM을 적극적으로 사용하고 있는데, SAM을 쓰면서 느낀 점들을 예전에 글로 남긴 적이 있었다. 그런데 SAM은 CloudFormation 스택으로 리소스를 생성하다 보니, CloudFormation의 제약 사항을 그대로 가지고 있다. 예를 들어 하나의 CloudFormation 템플릿에서 선언할 수 있는 리소스 수는 200개를 넘지 않아야 한다는 것이 대표적일 것이다. 이러한 문제를 겪으면서, 많은 리소스로 구성되어 있는 애플리케이션을 여러 스택으로 나누는 작업을 해야 했다. 이 글에서는 하나의 서버리스 애플리케이션을 여러 스택으로 나누는 문제를 해결하면서 겪었던 일들을 기록해 보려고 한다.</description>
    </item>
    
    <item>
      <title>AWS Lambda에 Pandas 올리기</title>
      <link>/posts/pandas-on-aws-lambda/</link>
      <pubDate>Sat, 27 Jun 2020 21:45:40 +0900</pubDate>
      
      <guid>/posts/pandas-on-aws-lambda/</guid>
      <description>팀 내에서는 Lambda 안에 파이썬 코드를 올려서 쓰고 있지만, 혹시 Pandas와 같은 라이브러리를 Lambda에 올리려면 어떻게 해야 할 지 궁금해서 정리해 본다.
이 예제에서는 Pandas를 Lambda Layer로 만들고, Layer를 Lambda 함수에 연결해서 사용해 보려고 한다.
AWS Lambda(Lambda Layer)의 제한 AWS Lambda에는 Lambda Layer라고 해서 의존성이 필요한 것들을 묶어서 별도의 계층으로 만들어 쓸 수 있도록 하고 있다.
하지만 이런 기능도 제한이 있으니 한 번 확인해 보자.
참고 문서 AWS Lambda 제한 AWS Lambda 계층 주요 제한 사항 하나의 함수에서 사용할 수 있는 Layer 수: 5 개 함수와 Layer를 모두 합하여 250 MB를 초과할 수 없음 Pandas Lambda Layer 만들기 Lambda Layer의 내용은 /opt 디렉터리에 들어가게 된다.</description>
    </item>
    
    <item>
      <title>요즘 좋아하는 노래들</title>
      <link>/posts/favorite-music-nowadays/</link>
      <pubDate>Sat, 13 Jun 2020 12:59:28 +0900</pubDate>
      
      <guid>/posts/favorite-music-nowadays/</guid>
      <description>제 인생의 즐거움 중 가장 큰 것들을 뽑으라면 축구와 락 페스티벌이라 할 수 있습니다. 근데 요즘은 코로나 때문에 락페든 축구든 직관이 불가능한 상황이죠. 그러다 보니 유튜브에서 락 페스티벌 공연 영상을 자주 봤었어요. 원래 알고 있던 노래도 있지만, 새로 알게된 노래들 중 최근에 자주 들었던 노래들을 소개해 드리려고 합니다. 한 편으로는 블로그에 GitHub Actions를 걸어놨는데, 이게 제대로 동작하는지 테스트해 보고 싶어서 쓰는 글이기도 합니다.
Idles - Danny Nedelko 원래 뮤직비디오도 좋지만, 개인적으로는 작년 글라스톤베리에서 공연했던 영상을 더 좋아합니다.</description>
    </item>
    
    <item>
      <title>Retrospect 2019</title>
      <link>/posts/retrospect-2019/</link>
      <pubDate>Sat, 04 Jan 2020 15:11:05 +0900</pubDate>
      
      <guid>/posts/retrospect-2019/</guid>
      <description>2020년이 된 지 4일이 되었지만, 지난 1년 간에 있었던 일들을 정리해 보려 합니다.
발표 AWS Summit Seoul 2019 커뮤니티 세션에서 저희 부서의 데이터 저장 기반 구축 사례를 소개했습니다. 다음 영상에서 확인하실 수 있습니다. (슬라이드는 여기를 눌러주세요)
PyCon Korea 외의 다른 행사에서 발표하는 건 처음이었는데요. 정말 많은 분들이 오셔서 긴장했는데, 어떻게든 잘 넘어갔던 것 같아요. 발표한 내용은 재작년(2018) 말 기준으로 구성했던 내용이고, 현재 저희 팀의 AWS 인프라는 많은 부분이 바뀐 상태입니다. 그리고 작년 AWS Summit을 기점으로 AWSKRUG 내 소모임도 가끔씩 참석하게 되었습니다.</description>
    </item>
    
    <item>
      <title>신입 사원 교육 후기: 이상과 현실</title>
      <link>/posts/retrospect-lecture-for-newbie/</link>
      <pubDate>Wed, 01 Jan 2020 20:43:58 +0900</pubDate>
      
      <guid>/posts/retrospect-lecture-for-newbie/</guid>
      <description>연말에 회고를 쓰신 분들을 많이 보게 됩니다. 저는 여러 일들이 있어 이제서야 한숨 돌렸는데요. 작년 회고는 두 개의 글로 나누어 작성하려고 합니다. 먼저 최근에 진행했었던 신입사원 교육 후기(가르치는 사람의 입장에서)를 먼저 공유해 드립니다. 나머지 이야기는 이번 주말에 작성하려고 합니다.
어떻게 해서 신입 사원을 뽑게 되었는가? 저희 팀의 인프라 담당자는 저를 포함하여 두 명뿐이었습니다. 시간이 지나면서 저희가 갖고 있는 데이터를 기반으로 하는 서비스가 조금씩 늘어났고, 그러면서 업무가 늘어나는 상황이었습니다. 이에 처음에는 경력자를 뽑으려고 했으나, 어려웠던 상황이었는데요.</description>
    </item>
    
    <item>
      <title>AWS SAM을 사용하면서 느꼈던 것들</title>
      <link>/posts/retrospect-aws-sam/</link>
      <pubDate>Tue, 22 Oct 2019 21:02:00 +0900</pubDate>
      
      <guid>/posts/retrospect-aws-sam/</guid>
      <description>왜 SAM을 사용하게 되었나? 시스템 내부에서 관리하는 Lambda 함수들이 늘어나면서, 이를 관리할 방법을 찾아야 했다. 기존에는 Apex를 Lambda 함수 배포에 이용했지만, 뭔가 자동화된 방법을 찾고 싶었다.
그래서 Serverless Framework, Terraform, SAM과 같은 도구들을 검토해 봤다. 그러다가 SAM을 최종적으로 선택했는데, 이유는 다음과 같다.
Serverless Framework는 다양한 클라우드 벤더를 지원하지만, 다른 AWS 서비스를 연동하는 데 제약이 있지 않을까? 하는 막연한 생각이 들었다. (잘 찾아보니 내가 원하는 것들은 구현 가능할 것 같더라. 내가 잘못 생각했던 것 같다)</description>
    </item>
    
    <item>
      <title>Hortonworks Sandbox를 AWS에서 사용하기</title>
      <link>/posts/hortonworks-sandbox-on-aws/</link>
      <pubDate>Wed, 16 Oct 2019 21:05:00 +0900</pubDate>
      
      <guid>/posts/hortonworks-sandbox-on-aws/</guid>
      <description>들어가며 최근에 &amp;lsquo;하둡과 스파크를 활용한 실용 데이터 과학&amp;rsquo;이라는 책을 읽고 따라해 보고 있다. 이 책에서는 실습을 위해 호튼웍스(Hortonworks)의 Sandbox 이미지를 사용해 보기를 권장하고 있다. 그런데 설치 방법을 찾다 보니, 권장 사양이 높은 것 같다는 생각이 들었다. 이 이미지를 VirtualBox에서 사용할 때, 메모리 용량이 8GB로 설정되어 있었다. 그런데 지금 내가 쓰고 있는 노트북의 메모리 용량이 8GB라 좀 어려울 것 같았다. 그래서 AWS에 이 이미지를 올려보게 되었다.
(주의: 이 글에서 설명하는 내용은 AWS의 Free Tier 범위를 넘어가므로 사용한 만큼 요금이 부과됩니다.</description>
    </item>
    
    <item>
      <title>EC2에 Bitnami MongoDB 이미지 올리기</title>
      <link>/posts/bitnami-mongodb/</link>
      <pubDate>Sat, 16 Feb 2019 22:30:00 +0900</pubDate>
      
      <guid>/posts/bitnami-mongodb/</guid>
      <description>최근에 AWS에서 MongoDB와 호환되는 DocumentDB를 출시했지만, 아직 서울 리전에서는 사용할 수 없다.
(2019년 5월에 서울 리전에 출시되었습니다. 링크한 글을 확인해 주세요~)
그렇지만 필요에 따라 MongoDB를 쓸 일이 있을 것이다. AWS에서 Bitnami의 이미지를 활용해서 EC2에 MongoDB를 올려보고, 시험 삼아 데이터를 넣어보자.
EC2 설정 EC2 인스턴스를 생성하기 위해 AWS의 EC2 콘솔로 들어간다. 아래 스크린샷과 같은 화면이 나오면, &amp;lsquo;인스턴스 시작&amp;rsquo;을 누른다.
그리고 검색어에서 MongoDB를 입력하고, 왼쪽에서 AWS Marketplace를 누른다.
스크롤을 아래로 내리다 보면, &amp;lsquo;MongoDB Certified by Bitnami&amp;rsquo;가 있다.</description>
    </item>
    
    <item>
      <title>2018년 회고</title>
      <link>/posts/retrospect-2018/</link>
      <pubDate>Tue, 01 Jan 2019 18:13:00 +0900</pubDate>
      
      <guid>/posts/retrospect-2018/</guid>
      <description>개인적으로는 변화가 많은 한 해였습니다. 업무의 분야가 바뀌었고, 새로운 환경에 적응해야 했으며, 주로 쓰는 프로그래밍 언어도 바뀌었습니다. 2018년에 일어났던 일들 중 주요한 몇 가지에 대해 다루어 보려고 합니다.
서비스를 만드는 경험 서비스를 만드는 기업으로 이직하겠다는 생각은 계속 했지만, 이를 행동으로 옮긴 건 작년이 처음이었습니다. 그 과정에서 제가 느낀 점은 두 가지로 요약할 수 있을 것 같아요.
1. 협업 이야기 저는 서비스를 기반부터 개발하는 경험이 부족했습니다. 교육 분야에서 비슷한 서비스를 개발한 사례가 많지 않아, 특히 데이터를 다루는 서비스를 어떻게 개발하는지에 대해 많이 찾아봤었습니다.</description>
    </item>
    
    <item>
      <title>Netstat으로 리눅스 서버에서 클라이언트 접속 확인하기</title>
      <link>/posts/how-to-see-netstat/</link>
      <pubDate>Tue, 25 Dec 2018 17:15:00 +0900</pubDate>
      
      <guid>/posts/how-to-see-netstat/</guid>
      <description>회사에서 개발한 웹 서비스의 내부 테스트 버전을 배포하고, 다음과 같은 질문을 받았다.
박대리님, 서버에서 클라이언트가 몇 명이 접속 중인지 알 수 있는 방법이 있을까요?
사실 여러 사람을 대상으로 하는 웹 서비스를 개발하고 배포하는 건 처음이라, 이걸 어떻게 알 수 있는지 궁금하긴 했다.
그래서, how to get the number of connections from web server라는 키워드로 구글 검색을 해 보았다.
여기 나오는 문서들 중에서 가장 많이 언급되는 유틸리티가 netstat인데, 여기서 연결 개수를 어떻게 체크해 볼 수 있는지 알아보자.</description>
    </item>
    
    <item>
      <title>파이썬 문자열 다루기 - str.format()</title>
      <link>/posts/python-string-interpolation/</link>
      <pubDate>Sat, 01 Dec 2018 20:54:00 +0900</pubDate>
      
      <guid>/posts/python-string-interpolation/</guid>
      <description>문자열을 다루다 보면 .format()을 사용하는데, .format()으로 어떻게 문자열 중간을 채워볼 지에 대해 알아보겠다. 이 글은 필요할 때 매번 찾아보다가 귀찮아서 정리해 본 것이다.
들어가기 전에&amp;hellip; 혹시 C를 배워본 적이 있는지? C에는 printf()라는 함수가 있다. 변수의 내용을 표시하기 위해 아래 코드와 같이 %d, %f등의 문자열을 사용한 적이 있을 것이다.
int a = 0; printf(&amp;#39;%d&amp;#39;, a); 파이썬 또한 이런 방법을 지원한다. 하지만 튜플이나 딕셔너리와 같은 자료형은 제대로 표시되지 않는 문제가 있다고 한다. 자세한 내용은 링크를 참조하자.</description>
    </item>
    
    <item>
      <title>책 리뷰 - &#39;인문학도, 개발자되다&#39;</title>
      <link>/posts/become-dev-book-review/</link>
      <pubDate>Thu, 29 Nov 2018 23:36:00 +0900</pubDate>
      
      <guid>/posts/become-dev-book-review/</guid>
      <description>책 소개 제 주변에는 학교를 졸업하고 만난 분들을 제외하면 개발자로 일하시는 분이 거의 없다시피 합니다. 그러다 보니 저에게 개발자의 업무 또는 어떻게 개발자가 될 수 있는지에 대해 물어보시는 분들이 가끔씩 계십니다. 하지만 저는 경력이 아직 5년이 되지 않았고, 말빨(?)이 약한 편이라 개발자라는 직업에 대해 섣불리 말씀드리기 조심스럽습니다.
그러던 와중에 &amp;lsquo;인문학도, 개발자되다(마르코 저, 영진닷컴)&amp;rsquo; 라는 책을 접하게 되었습니다. 이 책은 저자인 마르코님이 개발자로 전직을 하게 된 계기와 과정, 개발자로 일하기 위해서 어떤 능력이 필요한지, 그리고 앞으로 어떻게 개발 능력을 키워나가야 될 지에 대해 이야기하고 있습니다.</description>
    </item>
    
    <item>
      <title>S3 버킷의 객체가 1,000개를 넘을 때 객체 목록 조회하기</title>
      <link>/posts/list-over-1000-files-from-s3/</link>
      <pubDate>Thu, 29 Nov 2018 00:38:00 +0900</pubDate>
      
      <guid>/posts/list-over-1000-files-from-s3/</guid>
      <description>S3 버킷에는 여러 파일들을 저장할 수 있다. 그런데, 버킷에 저장된 파일의 목록을 보고 싶은 경우가 있을 것이다. 하지만, AWS의 Python SDK인 Boto3에서 list_objects()나 list_objects_v2() 함수를 이용하면 최대 1,000개까지의 object만 가져올 수 있다. [참고] (근본적으로는 AWS의 API가 최대 1,000개까지의 object만 가져오도록 구현되어 있다. - [참고])
이런 문제를 해결하기 위해, 다음과 같이 Paginator를 이용해 보자.
Paginator 이용하기 get_paginator()로 Paginator 가져오기 기본적으로 S3를 담당할 클라이언트를 생성한 뒤, get_paginator()로 Paginator를 가져온다. 여기서는 하나의 버킷에서 object들을 가져오기 위해 list_objects_v2를 이용한다.</description>
    </item>
    
    <item>
      <title>Python으로 Step Functions 활동 만들기</title>
      <link>/posts/step-function-with-python/</link>
      <pubDate>Thu, 04 Oct 2018 23:21:00 +0900</pubDate>
      
      <guid>/posts/step-function-with-python/</guid>
      <description>AWS에는 Step Functions라는 서비스가 있다. 여러 개의 활동(activity)를 조합해서 순서대로 또는 반복적으로 원하는 작업을 실행할 수 있도록 해 주는 서비스이다.
일반적으로는 여러 개의 Lambda 함수를 연결해서 사용하는 경우가 많다. 하지만 Lambda 함수의 실행 시간이 5분을 넘어가면, 다른 방법을 고려해야 한다. 이럴 때 활동을 생성하고 이를 수행하는 코드를 작성하면, 오래 걸리는 작업도 Step Functions로 이용할 수 있다.
활동(Activity) 만들기 Step Functions 콘솔의 왼쪽 메뉴에서 활동을 클릭한다. 화면이 바뀌면 우측의 활동 생성을 클릭하여 새로운 활동을 만든다.</description>
    </item>
    
    <item>
      <title>VSCode와 oh-my-zsh를 사용할 때 터미널 글꼴이 깨진다면</title>
      <link>/posts/vscode-oh-my-zsh/</link>
      <pubDate>Thu, 04 Oct 2018 21:34:00 +0900</pubDate>
      
      <guid>/posts/vscode-oh-my-zsh/</guid>
      <description>최근에 oh-my-zsh를 써 보기 시작했다. (써보면 편하다고는 하는데, 아직까지는 체감을 못하고 있긴 하다.)
그런데 Visual Studio Code에서 터미널을 쓸 때, 아래처럼 글꼴이 깨지는 현상이 있었다. (현재 테마는 &amp;ldquo;agnoster&amp;quot;이다.)
이 문제에 대해 찾아보니, 다음과 같은 이슈를 발견할 수 있었다.
https://github.com/Microsoft/vscode/issues/7116
여기서 제시하는 해결책은 다음과 같다.
&amp;ldquo;SourceCodePro+Powerline+Awesome Regular&amp;rdquo; 글꼴을 받아 설치한다. 링크 Visual Studio Code 설정에서 terminal.integrated.fontFamily 항목에 &#39;SourceCodePro+Powerline+Awesome Regular&#39;를 넣는다. (작은 따옴표를 포함해야 한다!) 그러면 아래와 같이 터미널의 글꼴이 깨지지 않게 된다.</description>
    </item>
    
    <item>
      <title>RDS MySQL에서 일반/느린 쿼리 로그 찍기</title>
      <link>/posts/logging-rds/</link>
      <pubDate>Wed, 03 Oct 2018 14:24:00 +0900</pubDate>
      
      <guid>/posts/logging-rds/</guid>
      <description>RDS MySQL을 이용하면, 아래와 같이 CloudWatch에 일반/감사/느린 쿼리 로그를 찍도록 설정할 수 있다.
로그 찍기 설정(RDS 인스턴스 생성 시)
그리고 RDS 콘솔에 들어가면 로그 파일을 볼 수 있는데, 일반 로그나 느린 쿼리 로그를 찾을 수 없었다. 그래서 CloudWatch Logs를 찾아봤지만, 역시 로그가 없었다.
로그 파일이 없다(-_-&amp;hellip;)
그 이유를 찾아 보니, 파라미터 그룹에 로그 관련 설정을 하지 않은 것이 원인이었다.
다음과 같이 설정하면 된다.
먼저, RDS 콘솔에서 파라미터 그룹 메뉴를 클릭한다. 쓰던 파라미터 그룹이 있다면, 그 파라미터 그룹을 클릭하고, 새로 생성해야 한다면 파라미터 그룹 생성을 클릭해서 파라미터 그룹을 만든다.</description>
    </item>
    
    <item>
      <title>Git 원격 저장소에서 사용자 이름에 &#39;@&#39;이 들어가면 동작하지 않는 경우</title>
      <link>/posts/git-error-at/</link>
      <pubDate>Tue, 02 Oct 2018 23:46:00 +0900</pubDate>
      
      <guid>/posts/git-error-at/</guid>
      <description>부서에서 사용하는 CodeCommit에 Push를 하려고 하는데, 아래와 같은 오류 때문에 Push를 할 수 없었다.
fatal: UriFormatException encountered. queryUrl 보통 이런 문제가 발생하면 오류 메시지를 먼저 찾아 보는 편인데, 이상하게 검색이 잘 안 됐었다. (컨디션이 안 좋아서 그랬던가&amp;hellip;-_-) 그러다가 다음과 같은 내용을 발견했다.
https://github.com/Microsoft/Git-Credential-Manager-for-Windows/issues/587
내용을 요약하면 다음과 같다.
Git 원격 저장소의 사용자 이름이 이메일 주소인 경우 이러한 오류가 발생한다. RFC3986에 따르면, URI에 이미 할당되어 있는 문자는 :/?#[]@!$&amp;amp;&#39;()*+,;=이다. @의 경우, %40으로 바꾸면(escaping) 문제를 해결할 수 있다.</description>
    </item>
    
    <item>
      <title>AWS Lambda에서 별칭(alias)으로 함수 버전 구분하기</title>
      <link>/posts/check-lambda-version/</link>
      <pubDate>Tue, 02 Oct 2018 23:16:00 +0900</pubDate>
      
      <guid>/posts/check-lambda-version/</guid>
      <description>test라는 함수가 있고, dev, release라는 별칭(alias)이 존재한다고 하자. 그리고 모든 별칭은 동일한 버전을 가리킨다고 하자.
이 경우 context 객체의 invoked_function_arn은 어떻게 달라지는지 보자. 테스트를 위해, 다음과 같이 파이썬으로 함수를 작성하였다.
import json def lambda_handler(event, context): print(context.invoked_function_arn) return &amp;#34;Success&amp;#34; 그리고 CloudWatch에 기록된 로그를 보자.
dev인 경우
START RequestId: 2dce0b80-5fb4-11e8-b5b7-41e11422a67a Version: 1 arn:aws:lambda:ap-northeast-2:256724228018:function:test:dev END RequestId: 2dce0b80-5fb4-11e8-b5b7-41e11422a67a REPORT RequestId: 2dce0b80-5fb4-11e8-b5b7-41e11422a67a Duration: 1.56 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 22 MB release인 경우</description>
    </item>
    
    <item>
      <title>Python Datetime의 fromtimestamp() 사용 시 주의할 점</title>
      <link>/posts/python-datetime-fromtimestamp/</link>
      <pubDate>Thu, 13 Sep 2018 00:08:00 +0900</pubDate>
      
      <guid>/posts/python-datetime-fromtimestamp/</guid>
      <description>최근에 Timestamp가 있는 데이터를 다루다가, 신기한 버그를 발견하여 여기에 기록해 본다. 해당 문제가 수정된 것 같기는 한데, 아직 배포는 안 된 것 같다.
Windows에서 발생하는 버그 fromtimestamp 함수의 버그 (Windows)
해당 이슈에 대해 설명한 부분을 확인하면, 0에서 86399 사이의 값을 입력하면 OSError가 발생한다.
Ubuntu에서는? 잘 동작한다. 심지어 Windows 10에 깔린 Ubuntu를 이용했고, 3.5.x 버전인데도 멀쩡히 잘 돌아간다.
Ubuntu에서는 정상적으로 동작한다.
참고자료 https://bugs.python.org/issue29097 https://docs.python.org/3/whatsnew/changelog.html </description>
    </item>
    
    <item>
      <title>Python underscore 관련 naming convention</title>
      <link>/posts/python-underscores/</link>
      <pubDate>Sat, 26 May 2018 10:32:00 +0900</pubDate>
      
      <guid>/posts/python-underscores/</guid>
      <description>파이썬에는 PEP-8이라는 Python Code Style Guide가 있다. 모든 내용을 한 번에 정리하기 어려워서 그냥 코딩하다가 궁금한 것 위주로 정리해 보려고 한다.
이번 글에서는 &amp;lsquo;_&amp;rsquo;(Underscore)가 붙는 변수나 메서드에 관련한 내용을 정리하려고 한다.
Trailing underscore _single_leading_underscore: 이런 경우 from M import *에서는 _로 시작하는 object를 import 하지 않는다. single_trailing_underscore_: 파이썬 언어 내에서 사용되는 키워드와의 충돌을 피하기 위해 작성한다. BeautifulSoup에서 HTML의 class를 기준으로 무언가를 찾을 때 class_와 같이 속성을 지정해 줄 때가 있다.</description>
    </item>
    
    <item>
      <title>Python `@property` 데코레이터와 getter/setter</title>
      <link>/posts/python-property-decorator/</link>
      <pubDate>Fri, 18 May 2018 23:36:00 +0900</pubDate>
      
      <guid>/posts/python-property-decorator/</guid>
      <description>예전에 어떤 소스를 보다가 클래스 내부에 @property 데코레이터가 붙어 있는 경우를 본 적이 있다. 어떤 경우에 사용하는지 궁금해서 한 번 정리해 보려 한다.
property() 함수 먼저 property() 함수에 대해 살펴보자.
class property(fget=None, fset=None, fdel=None, doc=None) 페이지 아래에 링크한 자료를 살펴보면, property 함수는 property 속성을 반환한다고 나와 있다. 그리고 fget 인자에는 속성 값에 대한 getter 함수, fset 인자에는 속성 값에 대한 setter 함수, fdel 인자에는 속성 값을 지우는 함수를 지정한다고 한다. 그리고 doc 인자는 속성에 대한 docstring을 넣어주면 된다.</description>
    </item>
    
    <item>
      <title>Python Datetime으로 서로 다른 시간대 다루기</title>
      <link>/posts/python-datetime-test/</link>
      <pubDate>Thu, 17 May 2018 22:06:00 +0900</pubDate>
      
      <guid>/posts/python-datetime-test/</guid>
      <description>여러 국가에 걸쳐 시간과 관련된 데이터를 얻을 때 시간대가 가장 이슈가 될 것이다. 그리고 AWS와 같이 UTC를 기준으로 하는 서비스가 있기 때문에, 우리나라의 시간대를 기준으로 프로그램을 만들 때 고민이 되는 부분이 있다.
시간대를 다루기 위해 pytz와 같은 라이브러리가 있지만, 이번에는 파이썬이 기본적으로 제공하는 datetime 모듈만 이용해서 시간대를 다루어 보고자 한다.
현재 시간 구하기 / UTC 기준 시간 구하기 현재 시간을 구하기 위해서는 datetime.datetime.now()를 이용한다.
&amp;gt;&amp;gt;&amp;gt; import datetime &amp;gt;&amp;gt;&amp;gt; datetime.datetime.now() datetime.datetime(2018, 5, 17, 21, 43, 13, 554579) 한편, UTC 기준의 현재 시간을 구하기 위해서는 datetime.</description>
    </item>
    
    <item>
      <title>몰라서 찾아 봤던 파이썬 내장 함수 모음</title>
      <link>/posts/python-built-in-functions/</link>
      <pubDate>Wed, 16 May 2018 23:27:00 +0900</pubDate>
      
      <guid>/posts/python-built-in-functions/</guid>
      <description>파이썬을 쓰다가 필요한 기능이 있어서 찾아 보면, 언어 자체에서 지원하는 기능인 경우가 종종 있었다. 지금까지 파이썬을 다루면서 찾아봤던 내장 함수들을 정리해 본다.
아래에서 계속 iterable이라는 말을 많이 쓸 것이다. iterable에는 sequence type인 list, str, tuple 뿐만 아니라 non-sequence type인 dict, file object, 그리고 Sequence semantics를 구현하기 위해 __iter__()나 __getitem__() method가 정의되어 있는 클래스의 object 등이 있다. (참고)
sum(): 각각의 item을 합치기 참고: https://docs.python.org/3/library/functions.html#sum
sum(iterable[, start]) iterable 객체를 받아서 각 요소들의 합을 구한다.</description>
    </item>
    
    <item>
      <title>파이썬에서 테스트 코드를 만들면서 겪은 일들</title>
      <link>/posts/python-making-test-module/</link>
      <pubDate>Tue, 15 May 2018 22:35:00 +0900</pubDate>
      
      <guid>/posts/python-making-test-module/</guid>
      <description>이번 글에서는 파이썬에서 테스트 코드를 만들면서 겪었던 시행착오에 대해 소개하고자 한다. 여기서는 파이썬에 내장된 unittest를 이용한다.
테스트를 수행하는 기준은? 간단한 코드를 만들어 보자. 파일 이름은 aaa.py로 저장한다.
import unittest class TestExample(unittest.TestCase): def test_a(self): self.assertEqual(1 == 2, False) 그리고 쉘에서 python -m unittest를 입력하면, 아무 테스트도 실행하지 않는다.
$ python -m unittest ---------------------------------------------------------------------- Ran 0 tests in 0.000s OK 왜 그럴까? unittest 라이브러리는 기본적으로 실행하는 top-level 디렉터리에서 test로 시작하는 파일을 찾아서 테스트를 수행한다.</description>
    </item>
    
    <item>
      <title>Python 날짜/시간을 문자열로 만들기 위한 규칙 정리</title>
      <link>/posts/python-datetime-string-formatting/</link>
      <pubDate>Mon, 14 May 2018 23:24:00 +0900</pubDate>
      
      <guid>/posts/python-datetime-string-formatting/</guid>
      <description>파이썬을 쓰다 보면 문자열을 다루는 경우가 많은데, 문자열을 특정한 양식에 맞추어야 하는 경우가 종종 있었다. 이 경우 PyFormat과 같은 사이트를 참조한다. 하지만 날짜나 시간을 formatting 할 때는 상세한 규칙이 정리되어 있지 않아서 이 참에 정리를 해 보려고 한다.
문자열을 넣거나 숫자를 다루는 경우, PyFormat에 자세한 내용이 있어서 생략한다.
이 글에서는 현재 시간을 datetime 객체로 받고, 이를 가지고 날짜와 시간을 문자열로 formatting 해 볼 것이다. (아래 코드 참조)
import datetime now = datetime.</description>
    </item>
    
    <item>
      <title>sed를 이용한 텍스트 파일 바꾸기</title>
      <link>/posts/use-sed-to-replace-text/</link>
      <pubDate>Sat, 21 Apr 2018 21:09:00 +0900</pubDate>
      
      <guid>/posts/use-sed-to-replace-text/</guid>
      <description>쉘 스크립트를 만들 때, 텍스트 파일의 내용을 바꾸는 기능이 필요할 때가 있다. 이 경우 sed를 쓰는데, sed의 사용 방법이 헷갈릴 때가 많아 이 기회에 정리를 해 보고자 한다. 이 글에서는 기본적인 사용 방법과 내가 주로 사용하는 기능만 정리하였다. sed가 지원하는 전체 기능이 궁금하다면, man page(man sed)를 확인하는 것이 최선이다.
텍스트 바꾸기 기본적으로 sed를 이용해서 텍스트를 바꾸는 방법은 다음과 같다.
$ sed -i &amp;#39;s/&amp;lt;원래 내용&amp;gt;/&amp;lt;바꿀 내용&amp;gt;/g&amp;#39; &amp;lt;파일 이름&amp;gt; 여기서 -i, s/&amp;lt;원래 내용&amp;gt;/&amp;lt;바꿀 내용&amp;gt;/, g가 의미하는 내용은 다음과 같다.</description>
    </item>
    
    <item>
      <title>이직 시도 후기 - 2017년 하반기</title>
      <link>/posts/my-trial-for-moving/</link>
      <pubDate>Sun, 10 Dec 2017 16:02:00 +0900</pubDate>
      
      <guid>/posts/my-trial-for-moving/</guid>
      <description>이 포스트는 개인적으로 이직을 준비하는 과정에서 느낀 점들을 정리한 글입니다. 차후 발생 가능한 문제를 막기 위해, 채용 프로세스나 면접 질문을 언급하는 과정에서 특정한 기업을 지칭하지 않습니다. 구직/구인 과정에서 참고로 봐 주시면 좋겠습니다.
배경 프로필에도 적어 놓았지만, 저는 아직 인턴 신분으로 일하고 있습니다. 저희 기관 특성 상 정규직 T/O가 나오기 어렵기 때문에, 이직을 결심하고 여러 군데에 서류를 제출하기 시작했습니다.
일단 지금까지의 프로필을 요약하면 다음과 같습니다.
복수전공으로 컴퓨터학부를 전공 (본 전공은 사범대에서 사회교육) 첫 직장은 임베디드 쪽 경력으로 시작 (리눅스 기반, C 언어 주로 사용) 현재는 공공기관 인턴으로 근무 (부서에서는 개발자 역할을 하고 있습니다) Python, Django 기반의 Toy project 개발 경험 PyCon Korea 2017 발표자로 참석 그리고 주로 제가 지원한 곳은 스타트업이 많았습니다.</description>
    </item>
    
  </channel>
</rss>
