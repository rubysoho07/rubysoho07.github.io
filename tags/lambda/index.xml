<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda on GoniGoni!</title>
    <link>/tags/lambda/</link>
    <description>Recent content in Lambda on GoniGoni!</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 29 Jun 2020 20:58:17 +0900</lastBuildDate>
    <atom:link href="/tags/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS SAM에서 중첩된 스택 배포 시 유의해야 할 것들</title>
      <link>/posts/aws-sam-nested-stack/</link>
      <pubDate>Mon, 29 Jun 2020 20:58:17 +0900</pubDate>
      <guid>/posts/aws-sam-nested-stack/</guid>
      <description>&lt;p&gt;팀에서 AWS SAM을 적극적으로 사용하고 있는데, SAM을 쓰면서 느낀 점들을 예전에 &lt;a href=&#34;/posts/retrospect-aws-sam/&#34;&gt;글로 남긴 적이 있었다&lt;/a&gt;. 그런데 SAM은 CloudFormation 스택으로 리소스를 생성하다 보니, CloudFormation의 제약 사항을 그대로 가지고 있다. 예를 들어 &lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html&#34;&gt;하나의 CloudFormation 템플릿에서 선언할 수 있는 리소스 수는 200개를 넘지 않아야 한다&lt;/a&gt;는 것이 대표적일 것이다. 이러한 문제를 겪으면서, 많은 리소스로 구성되어 있는 애플리케이션을 여러 스택으로 나누는 작업을 해야 했다. 이 글에서는 하나의 서버리스 애플리케이션을 여러 스택으로 나누는 문제를 해결하면서 겪었던 일들을 기록해 보려고 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Lambda에 Pandas 올리기</title>
      <link>/posts/pandas-on-aws-lambda/</link>
      <pubDate>Sat, 27 Jun 2020 21:45:40 +0900</pubDate>
      <guid>/posts/pandas-on-aws-lambda/</guid>
      <description>&lt;p&gt;팀 내에서는 Lambda 안에 파이썬 코드를 올려서 쓰고 있지만, 혹시 Pandas와 같은 라이브러리를 Lambda에 올리려면 어떻게 해야 할 지 궁금해서 정리해 본다.&lt;/p&gt;&#xA;&lt;p&gt;이 예제에서는 Pandas를 Lambda Layer로 만들고, Layer를 Lambda 함수에 연결해서 사용해 보려고 한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;aws-lambdalambda-layer의-제한&#34;&gt;AWS Lambda(Lambda Layer)의 제한&lt;/h2&gt;&#xA;&lt;p&gt;AWS Lambda에는 Lambda Layer라고 해서 의존성이 필요한 것들을 묶어서 별도의 계층으로 만들어 쓸 수 있도록 하고 있다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 이런 기능도 제한이 있으니 한 번 확인해 보자.&lt;/p&gt;&#xA;&lt;h3 id=&#34;참고-문서&#34;&gt;참고 문서&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/gettingstarted-limits.html&#34;&gt;AWS Lambda 제한&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/configuration-layers.html&#34;&gt;AWS Lambda 계층&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;주요-제한-사항&#34;&gt;주요 제한 사항&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;하나의 함수에서 사용할 수 있는 Layer 수: 5 개&lt;/li&gt;&#xA;&lt;li&gt;함수와 Layer를 모두 합하여 250 MB를 초과할 수 없음&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;pandas-lambda-layer-만들기&#34;&gt;Pandas Lambda Layer 만들기&lt;/h2&gt;&#xA;&lt;p&gt;Lambda Layer의 내용은 &lt;code&gt;/opt&lt;/code&gt; 디렉터리에 들어가게 된다. 파이썬 코드의 경우 &lt;code&gt;/opt/python&lt;/code&gt;이나 &lt;code&gt;/opt/python/lib/python(버전-예:3.8)/site-packages&lt;/code&gt; 디렉터리에 풀릴 것이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SAM을 사용하면서 느꼈던 것들</title>
      <link>/posts/retrospect-aws-sam/</link>
      <pubDate>Tue, 22 Oct 2019 21:02:00 +0900</pubDate>
      <guid>/posts/retrospect-aws-sam/</guid>
      <description>&lt;h2 id=&#34;왜-sam을-사용하게-되었나&#34;&gt;왜 SAM을 사용하게 되었나?&lt;/h2&gt;&#xA;&lt;p&gt;시스템 내부에서 관리하는 Lambda 함수들이 늘어나면서, 이를 관리할 방법을 찾아야 했다. 기존에는 &lt;a href=&#34;https://apex.run&#34;&gt;Apex&lt;/a&gt;를 Lambda 함수 배포에 이용했지만, 뭔가 자동화된 방법을 찾고 싶었다.&lt;/p&gt;&#xA;&lt;p&gt;그래서 Serverless Framework, Terraform, SAM과 같은 도구들을 검토해 봤다. 그러다가 SAM을 최종적으로 선택했는데, 이유는 다음과 같다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Serverless Framework는 다양한 클라우드 벤더를 지원하지만, 다른 AWS 서비스를 연동하는 데 제약이 있지 않을까? 하는 막연한 생각이 들었다. (잘 찾아보니 내가 원하는 것들은 구현 가능할 것 같더라. 내가 잘못 생각했던 것 같다)&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Lambda에서 별칭(alias)으로 함수 버전 구분하기</title>
      <link>/posts/check-lambda-version/</link>
      <pubDate>Tue, 02 Oct 2018 23:16:00 +0900</pubDate>
      <guid>/posts/check-lambda-version/</guid>
      <description>&lt;p&gt;test라는 함수가 있고, dev, release라는 별칭(alias)이 존재한다고 하자. 그리고 모든 별칭은 동일한 버전을 가리킨다고 하자.&lt;/p&gt;&#xA;&lt;p&gt;이 경우 context 객체의 invoked_function_arn은 어떻게 달라지는지 보자. 테스트를 위해, 다음과 같이 파이썬으로 함수를 작성하였다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lambda_handler&lt;/span&gt;(event, context): &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invoked_function_arn)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Success&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 CloudWatch에 기록된 로그를 보자.&lt;/p&gt;&#xA;&lt;p&gt;dev인 경우&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;START RequestId: 2dce0b80-5fb4-11e8-b5b7-41e11422a67a Version: 1&#xA;arn:aws:lambda:ap-northeast-2:256724228018:function:test:dev&#xA;END RequestId: 2dce0b80-5fb4-11e8-b5b7-41e11422a67a&#xA;REPORT RequestId: 2dce0b80-5fb4-11e8-b5b7-41e11422a67a  Duration: 1.56 ms       Billed Duration: 100 ms         Memory Size: 128 MB     Max Memory Used: 22 MB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;release인 경우&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
