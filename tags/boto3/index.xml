<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Boto3 on GoniGoni!</title>
    <link>/tags/boto3/</link>
    <description>Recent content in Boto3 on GoniGoni!</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 28 Jun 2021 22:34:04 +0900</lastBuildDate>
    <atom:link href="/tags/boto3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boto3를 쓰면서 겪었던 일들 모음</title>
      <link>/posts/boto3-note/</link>
      <pubDate>Mon, 28 Jun 2021 22:34:04 +0900</pubDate>
      <guid>/posts/boto3-note/</guid>
      <description>&lt;p&gt;Python을 이용해서 AWS의 여러 기능을 자동화 할 때 Boto3를 많이들 쓰실 것 같은데요. 이번 달에는 Boto3를 쓰면서 궁금했던 것, 또는 자주 사용할 만한 것들을 정리해 보려고 합니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;현재-사용-중인-aws-계정-id-얻기&#34;&gt;현재 사용 중인 AWS 계정 ID 얻기&lt;/h1&gt;&#xA;&lt;p&gt;여기서 계정 ID라고 하면, 12자리의 숫자로 구성된 계정의 ID를 의미합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; boto3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;account_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sts&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_caller_identity()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Account&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;출처: &lt;a href=&#34;https://stackoverflow.com/questions/33332050/getting-the-current-user-account-id-in-boto3&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;에러-다루기&#34;&gt;에러 다루기&lt;/h1&gt;&#xA;&lt;p&gt;출처: &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/guide/error-handling.html&#34;&gt;Boto3 Documentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/boto/boto3/blob/develop/boto3/exceptions.py&#34;&gt;Boto3의 코드&lt;/a&gt;를 열어보면, 서비스에 따라 발생할 수 있는 모든 에러를 저장하고 있지 않습니다. Boto3와 AWS CLI의 기반이 되는 &lt;a href=&#34;https://github.com/boto/botocore/blob/develop/botocore/exceptions.py&#34;&gt;Botocore 프로젝트의 코드&lt;/a&gt;에서도 모든 종류의 예외를 다루지 않습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>S3 버킷의 객체가 1,000개를 넘을 때 객체 목록 조회하기</title>
      <link>/posts/list-over-1000-files-from-s3/</link>
      <pubDate>Thu, 29 Nov 2018 00:38:00 +0900</pubDate>
      <guid>/posts/list-over-1000-files-from-s3/</guid>
      <description>&lt;p&gt;S3 버킷에는 여러 파일들을 저장할 수 있다. 그런데, 버킷에 저장된 파일의 목록을 보고 싶은 경우가 있을 것이다. 하지만, AWS의 Python SDK인 Boto3에서 &lt;code&gt;list_objects()&lt;/code&gt;나 &lt;code&gt;list_objects_v2()&lt;/code&gt; 함수를 이용하면 최대 1,000개까지의 object만 가져올 수 있다. &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.list_objects_v2&#34;&gt;[참고]&lt;/a&gt; (근본적으로는 AWS의 API가 최대 1,000개까지의 object만 가져오도록 구현되어 있다. - &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/API/v2-RESTBucketGET.html&#34;&gt;[참고]&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;이런 문제를 해결하기 위해, 다음과 같이 Paginator를 이용해 보자.&lt;/p&gt;&#xA;&lt;h3 id=&#34;paginator-이용하기&#34;&gt;Paginator 이용하기&lt;/h3&gt;&#xA;&lt;h4 id=&#34;get_paginator로-paginator-가져오기&#34;&gt;get_paginator()로 Paginator 가져오기&lt;/h4&gt;&#xA;&lt;p&gt;기본적으로 S3를 담당할 클라이언트를 생성한 뒤, get_paginator()로 Paginator를 가져온다. 여기서는 하나의 버킷에서 object들을 가져오기 위해 &lt;code&gt;list_objects_v2&lt;/code&gt;를 이용한다. (Boto3 문서에서는 &lt;code&gt;list_objects()&lt;/code&gt;보다 &lt;code&gt;list_objects_v2()&lt;/code&gt;를 이용하는 것을 권장하니 이를 이용하자.)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
