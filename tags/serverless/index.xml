<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serverless on GoniGoni!</title>
    <link>/tags/serverless/</link>
    <description>Recent content in Serverless on GoniGoni!</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sat, 28 Aug 2021 15:51:33 +0900</lastBuildDate>
    <atom:link href="/tags/serverless/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CloudFormation과 SAM을 쓰면서 겪었던 일들 모음</title>
      <link>/posts/cloudformation-sam-tmi/</link>
      <pubDate>Sat, 28 Aug 2021 15:51:33 +0900</pubDate>
      <guid>/posts/cloudformation-sam-tmi/</guid>
      <description>&lt;p&gt;최근 인프라 구성을 CloudFormation을 이용해서 조정해 보았습니다. 그 과정에서 여러 Lambda 함수를 쓸 때는 SAM으로, 그 외의 경우는 CloudFormation을 사용했는데요.&lt;/p&gt;&#xA;&lt;p&gt;이번 작업으로 여러 CloudFormation 스택에 흩어져 있던 리소스를 하나로 모으고, 템플릿의 관리 방식도 좀 더 관리하게 편하도록 설정할 수 있게 되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;저희 팀이 여러 IaC(Infrastructure as Code) 툴 중에 왜 SAM과 CloudFormation을 사용하는 이유는 &lt;a href=&#34;/posts/retrospect-aws-sam/&#34;&gt;이 문서&lt;/a&gt;를 참고해 주세요.&lt;/p&gt;&#xA;&lt;p&gt;이번 글은 CloudFormation과 SAM을 쓰면서 겪었던 일들을 정리해 보려고 합니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;sam에서-api-gateway-정의를-sam-template에-넣기&#34;&gt;SAM에서 API Gateway 정의를 SAM Template에 넣기&lt;/h2&gt;&#xA;&lt;p&gt;SAM에서 제공하는 &lt;code&gt;AWS::Serverless::Api&lt;/code&gt; 리소스는 AWS Gateway의 REST API를 생성해 주는 기능입니다. API Gateway에는 &lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/api-gateway-import-api.html&#34;&gt;OpenAPI 규격으로 작성된 API 스펙을 가지고 올 수 있는 기능&lt;/a&gt;이 있는데요. SAM에서도 마찬가지로 해당 기능을 지원합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SAM에서 중첩된 스택 배포 시 유의해야 할 것들</title>
      <link>/posts/aws-sam-nested-stack/</link>
      <pubDate>Mon, 29 Jun 2020 20:58:17 +0900</pubDate>
      <guid>/posts/aws-sam-nested-stack/</guid>
      <description>&lt;p&gt;팀에서 AWS SAM을 적극적으로 사용하고 있는데, SAM을 쓰면서 느낀 점들을 예전에 &lt;a href=&#34;/posts/retrospect-aws-sam/&#34;&gt;글로 남긴 적이 있었다&lt;/a&gt;. 그런데 SAM은 CloudFormation 스택으로 리소스를 생성하다 보니, CloudFormation의 제약 사항을 그대로 가지고 있다. 예를 들어 &lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html&#34;&gt;하나의 CloudFormation 템플릿에서 선언할 수 있는 리소스 수는 200개를 넘지 않아야 한다&lt;/a&gt;는 것이 대표적일 것이다. 이러한 문제를 겪으면서, 많은 리소스로 구성되어 있는 애플리케이션을 여러 스택으로 나누는 작업을 해야 했다. 이 글에서는 하나의 서버리스 애플리케이션을 여러 스택으로 나누는 문제를 해결하면서 겪었던 일들을 기록해 보려고 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Lambda에 Pandas 올리기</title>
      <link>/posts/pandas-on-aws-lambda/</link>
      <pubDate>Sat, 27 Jun 2020 21:45:40 +0900</pubDate>
      <guid>/posts/pandas-on-aws-lambda/</guid>
      <description>&lt;p&gt;팀 내에서는 Lambda 안에 파이썬 코드를 올려서 쓰고 있지만, 혹시 Pandas와 같은 라이브러리를 Lambda에 올리려면 어떻게 해야 할 지 궁금해서 정리해 본다.&lt;/p&gt;&#xA;&lt;p&gt;이 예제에서는 Pandas를 Lambda Layer로 만들고, Layer를 Lambda 함수에 연결해서 사용해 보려고 한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;aws-lambdalambda-layer의-제한&#34;&gt;AWS Lambda(Lambda Layer)의 제한&lt;/h2&gt;&#xA;&lt;p&gt;AWS Lambda에는 Lambda Layer라고 해서 의존성이 필요한 것들을 묶어서 별도의 계층으로 만들어 쓸 수 있도록 하고 있다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 이런 기능도 제한이 있으니 한 번 확인해 보자.&lt;/p&gt;&#xA;&lt;h3 id=&#34;참고-문서&#34;&gt;참고 문서&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/gettingstarted-limits.html&#34;&gt;AWS Lambda 제한&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/configuration-layers.html&#34;&gt;AWS Lambda 계층&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;주요-제한-사항&#34;&gt;주요 제한 사항&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;하나의 함수에서 사용할 수 있는 Layer 수: 5 개&lt;/li&gt;&#xA;&lt;li&gt;함수와 Layer를 모두 합하여 250 MB를 초과할 수 없음&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;pandas-lambda-layer-만들기&#34;&gt;Pandas Lambda Layer 만들기&lt;/h2&gt;&#xA;&lt;p&gt;Lambda Layer의 내용은 &lt;code&gt;/opt&lt;/code&gt; 디렉터리에 들어가게 된다. 파이썬 코드의 경우 &lt;code&gt;/opt/python&lt;/code&gt;이나 &lt;code&gt;/opt/python/lib/python(버전-예:3.8)/site-packages&lt;/code&gt; 디렉터리에 풀릴 것이다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
