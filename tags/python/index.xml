<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on GoniGoni!</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on GoniGoni!</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 31 Oct 2021 10:58:31 +0900</lastBuildDate>
    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python에서 logging으로 로그 만들기</title>
      <link>/posts/python-logging/</link>
      <pubDate>Sun, 31 Oct 2021 10:58:31 +0900</pubDate>
      <guid>/posts/python-logging/</guid>
      <description>&lt;p&gt;프로그램이 잘 동작하는 지 확인하고 싶다면, &lt;code&gt;print()&lt;/code&gt;를 쓸 때가 많습니다. 하지만 프로그램이 복잡하게 바뀌면서 &lt;code&gt;print()&lt;/code&gt;만으로는 감당하기 어려운 상황이 발생합니다.&lt;/p&gt;&#xA;&lt;p&gt;그럴 때 어떻게 로그를 만들고 관리할 지를 고민하게 되는데요. 이번 글에서는 Python에서 &lt;code&gt;logging&lt;/code&gt; 모듈을 활용해서 어떻게 로그를 관리할 수 있는지 살펴보려고 합니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;기본적인-로깅-만들기&#34;&gt;기본적인 로깅 만들기&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;logging&lt;/code&gt; 모듈을 이용해서 로그를 만드는 방법은 다음과 같습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; logging&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;critical(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Critical log&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Error log&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Warning log&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Info log&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Debug log&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;스크립트를 실행해 보면 다음과 같이 표시됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boto3를 쓰면서 겪었던 일들 모음</title>
      <link>/posts/boto3-note/</link>
      <pubDate>Mon, 28 Jun 2021 22:34:04 +0900</pubDate>
      <guid>/posts/boto3-note/</guid>
      <description>&lt;p&gt;Python을 이용해서 AWS의 여러 기능을 자동화 할 때 Boto3를 많이들 쓰실 것 같은데요. 이번 달에는 Boto3를 쓰면서 궁금했던 것, 또는 자주 사용할 만한 것들을 정리해 보려고 합니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;현재-사용-중인-aws-계정-id-얻기&#34;&gt;현재 사용 중인 AWS 계정 ID 얻기&lt;/h1&gt;&#xA;&lt;p&gt;여기서 계정 ID라고 하면, 12자리의 숫자로 구성된 계정의 ID를 의미합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; boto3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;account_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sts&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_caller_identity()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Account&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;출처: &lt;a href=&#34;https://stackoverflow.com/questions/33332050/getting-the-current-user-account-id-in-boto3&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;에러-다루기&#34;&gt;에러 다루기&lt;/h1&gt;&#xA;&lt;p&gt;출처: &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/guide/error-handling.html&#34;&gt;Boto3 Documentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/boto/boto3/blob/develop/boto3/exceptions.py&#34;&gt;Boto3의 코드&lt;/a&gt;를 열어보면, 서비스에 따라 발생할 수 있는 모든 에러를 저장하고 있지 않습니다. Boto3와 AWS CLI의 기반이 되는 &lt;a href=&#34;https://github.com/boto/botocore/blob/develop/botocore/exceptions.py&#34;&gt;Botocore 프로젝트의 코드&lt;/a&gt;에서도 모든 종류의 예외를 다루지 않습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python의 map() filter() reduce() 사용 방법 정리</title>
      <link>/posts/python-map-reduce-filter/</link>
      <pubDate>Sat, 28 Nov 2020 13:13:35 +0900</pubDate>
      <guid>/posts/python-map-reduce-filter/</guid>
      <description>&lt;p&gt;가끔씩 Python의 &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;에 대해 헷갈리는 것들이 있어서 정리해 본다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;mapfunction-iterable-&#34;&gt;map(function, iterable, &amp;hellip;)&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reference: &lt;a href=&#34;https://docs.python.org/3/library/functions.html#map&#34;&gt;Python 문서 참조&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;iterable&lt;/code&gt;에 있는 모든 요소에 &lt;code&gt;function&lt;/code&gt;을 적용하여 그 결과를 반환한다. &lt;code&gt;function&lt;/code&gt;은 여러 인자를 받을 수 있어야 하고, 모든 iterable의 아이템에 동시에 적용되도록 해야 한다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, l1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;map object at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1006d1040&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;map()을 수행한 결과는 map object로 반환되므로, 이를 list나 tuple로 바꾸는 작업이 필요하다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, l1))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;함수 정의를 보면, &lt;code&gt;iterable&lt;/code&gt; 뒤에 &lt;code&gt;...&lt;/code&gt;이 붙는 것을 볼 수 있다. 여러 iterable을 붙이면 어떻게 될까?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Datetime의 fromtimestamp() 사용 시 주의할 점</title>
      <link>/posts/python-datetime-fromtimestamp/</link>
      <pubDate>Thu, 13 Sep 2018 00:08:00 +0900</pubDate>
      <guid>/posts/python-datetime-fromtimestamp/</guid>
      <description>&lt;p&gt;최근에 Timestamp가 있는 데이터를 다루다가, 신기한 버그를 발견하여 여기에 기록해 본다. 해당 문제가 수정된 것 같기는 한데, 아직 배포는 안 된 것 같다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;windows에서-발생하는-버그&#34;&gt;Windows에서 발생하는 버그&lt;/h3&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;/img/python_fromtimestamp_windows.png&#34;&#xA;    alt=&#34;fromtimestamp 함수의 버그 (Windows)&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;fromtimestamp 함수의 버그 (Windows)&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://bugs.python.org/issue29097&#34;&gt;해당 이슈&lt;/a&gt;에 대해 설명한 부분을 확인하면, &lt;strong&gt;&lt;em&gt;0에서 86399&lt;/em&gt;&lt;/strong&gt; 사이의 값을 입력하면 OSError가 발생한다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;ubuntu에서는&#34;&gt;Ubuntu에서는?&lt;/h3&gt;&#xA;&lt;p&gt;잘 동작한다. 심지어 Windows 10에 깔린 Ubuntu를 이용했고, 3.5.x 버전인데도 멀쩡히 잘 돌아간다.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;/img/python_fromtimestamp_ubuntu.png&#34;&#xA;    alt=&#34;Ubuntu에서는 정상적으로 동작한다.&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Ubuntu에서는 정상적으로 동작한다.&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h3 id=&#34;참고자료&#34;&gt;참고자료&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bugs.python.org/issue29097&#34;&gt;https://bugs.python.org/issue29097&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/changelog.html&#34;&gt;https://docs.python.org/3/whatsnew/changelog.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Python underscore 관련 naming convention</title>
      <link>/posts/python-underscores/</link>
      <pubDate>Sat, 26 May 2018 10:32:00 +0900</pubDate>
      <guid>/posts/python-underscores/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;파이썬에는 &lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;PEP-8&lt;/a&gt;이라는 Python Code Style Guide가 있다. 모든 내용을 한 번에 정리하기 어려워서 그냥 코딩하다가 궁금한 것 위주로 정리해 보려고 한다.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;이번 글에서는 &amp;lsquo;_&amp;rsquo;(Underscore)가 붙는 변수나 메서드에 관련한 내용을 정리하려고 한다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;trailing-underscore&#34;&gt;Trailing underscore&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;_single_leading_underscore&lt;/code&gt;: 이런 경우 &lt;code&gt;from M import *&lt;/code&gt;에서는 &lt;code&gt;_&lt;/code&gt;로 시작하는 object를 import 하지 않는다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;single_trailing_underscore_&lt;/code&gt;: 파이썬 언어 내에서 사용되는 키워드와의 충돌을 피하기 위해 작성한다. BeautifulSoup에서 HTML의 class를 기준으로 무언가를 찾을 때 &lt;code&gt;class_&lt;/code&gt;와 같이 속성을 지정해 줄 때가 있다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;__double_leading_underscore&lt;/code&gt;: 클래스 속성의 이름을 정할 때 name mangling을 피한다. 아래에 그 예가 있으니 참고하면 될 것 같다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;__double_leading_and_trailing_underscore__&lt;/code&gt;: 사용자가 컨트롤하는 네임스페이스에 있는 &amp;ldquo;magic&amp;rdquo; object나 속성이다. 예를 들어 &lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;__import__&lt;/code&gt;, &lt;code&gt;__file__&lt;/code&gt;등이 있다. 이러한 이름을 새로 만들 일은 거의 없을 것 같다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;package-and-module-names&#34;&gt;Package and Module Names&lt;/h3&gt;&#xA;&lt;p&gt;파이썬 모듈에서 C나 C++로 작성한 확장 모듈을 이용할 때, C나 C++ 모듈은 앞에 &lt;code&gt;_&lt;/code&gt;를 하나 붙여준다. PEP-8 문서에서는 &lt;code&gt;_socket&lt;/code&gt;을 예로 들고 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python `@property` 데코레이터와 getter/setter</title>
      <link>/posts/python-property-decorator/</link>
      <pubDate>Fri, 18 May 2018 23:36:00 +0900</pubDate>
      <guid>/posts/python-property-decorator/</guid>
      <description>&lt;p&gt;예전에 어떤 소스를 보다가 클래스 내부에 &lt;code&gt;@property&lt;/code&gt; 데코레이터가 붙어 있는 경우를 본 적이 있다. 어떤 경우에 사용하는지 궁금해서 한 번 정리해 보려 한다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;property-함수&#34;&gt;property() 함수&lt;/h3&gt;&#xA;&lt;p&gt;먼저 property() 함수에 대해 살펴보자.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class property(fget=None, fset=None, fdel=None, doc=None)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;페이지 아래에 링크한 자료를 살펴보면, property 함수는 property 속성을 반환한다고 나와 있다. 그리고 fget 인자에는 속성 값에 대한 getter 함수, fset 인자에는 속성 값에 대한 setter 함수, fdel 인자에는 속성 값을 지우는 함수를 지정한다고 한다. 그리고 doc 인자는 속성에 대한 docstring을 넣어주면 된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Datetime으로 서로 다른 시간대 다루기</title>
      <link>/posts/python-datetime-test/</link>
      <pubDate>Thu, 17 May 2018 22:06:00 +0900</pubDate>
      <guid>/posts/python-datetime-test/</guid>
      <description>&lt;p&gt;여러 국가에 걸쳐 시간과 관련된 데이터를 얻을 때 시간대가 가장 이슈가 될 것이다. 그리고 AWS와 같이 UTC를 기준으로 하는 서비스가 있기 때문에, 우리나라의 시간대를 기준으로 프로그램을 만들 때 고민이 되는 부분이 있다.&lt;/p&gt;&#xA;&lt;p&gt;시간대를 다루기 위해 pytz와 같은 라이브러리가 있지만, 이번에는 파이썬이 기본적으로 제공하는 datetime 모듈만 이용해서 시간대를 다루어 보고자 한다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;현재-시간-구하기--utc-기준-시간-구하기&#34;&gt;현재 시간 구하기 / UTC 기준 시간 구하기&lt;/h3&gt;&#xA;&lt;p&gt;현재 시간을 구하기 위해서는 &lt;code&gt;datetime.datetime.now()&lt;/code&gt;를 이용한다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;554579&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;한편, UTC 기준의 현재 시간을 구하기 위해서는 &lt;code&gt;datetime.datetime.utcnow()&lt;/code&gt;를 이용한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>몰라서 찾아 봤던 파이썬 내장 함수 모음</title>
      <link>/posts/python-built-in-functions/</link>
      <pubDate>Wed, 16 May 2018 23:27:00 +0900</pubDate>
      <guid>/posts/python-built-in-functions/</guid>
      <description>&lt;p&gt;파이썬을 쓰다가 필요한 기능이 있어서 찾아 보면, 언어 자체에서 지원하는 기능인 경우가 종종 있었다. 지금까지 파이썬을 다루면서 찾아봤던 내장 함수들을 정리해 본다.&lt;/p&gt;&#xA;&lt;p&gt;아래에서 계속 iterable이라는 말을 많이 쓸 것이다. iterable에는 sequence type인 list, str, tuple 뿐만 아니라 non-sequence type인 dict, file object, 그리고 Sequence semantics를 구현하기 위해 &lt;code&gt;__iter__()&lt;/code&gt;나 &lt;code&gt;__getitem__()&lt;/code&gt; method가 정의되어 있는 클래스의 object 등이 있다. &lt;a href=&#34;https://docs.python.org/3/glossary.html&#34;&gt;(참고)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;sum-각각의-item을-합치기&#34;&gt;sum(): 각각의 item을 합치기&lt;/h3&gt;&#xA;&lt;p&gt;참고: &lt;a href=&#34;https://docs.python.org/3/library/functions.html#sum&#34;&gt;https://docs.python.org/3/library/functions.html#sum&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sum(iterable[, start])&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;iterable 객체를 받아서 각 요소들의 합을 구한다. start는 적어주지 않으면 0으로 정해진다. 다음과 같이 사용할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>파이썬에서 테스트 코드를 만들면서 겪은 일들</title>
      <link>/posts/python-making-test-module/</link>
      <pubDate>Tue, 15 May 2018 22:35:00 +0900</pubDate>
      <guid>/posts/python-making-test-module/</guid>
      <description>&lt;p&gt;이번 글에서는 파이썬에서 테스트 코드를 만들면서 겪었던 시행착오에 대해 소개하고자 한다. 여기서는 파이썬에 내장된 &lt;code&gt;unittest&lt;/code&gt;를 이용한다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;테스트를-수행하는-기준은&#34;&gt;테스트를 수행하는 기준은?&lt;/h3&gt;&#xA;&lt;p&gt;간단한 코드를 만들어 보자. 파일 이름은 &lt;code&gt;aaa.py&lt;/code&gt;로 저장한다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestExample&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertEqual(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 쉘에서 &lt;code&gt;python -m unittest&lt;/code&gt;를 입력하면, 아무 테스트도 실행하지 않는다.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python -m unittest&#xA;&#xA;----------------------------------------------------------------------&#xA;Ran 0 tests in 0.000s&#xA;&#xA;OK&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;왜 그럴까? &lt;code&gt;unittest&lt;/code&gt; 라이브러리는 기본적으로 실행하는 top-level 디렉터리에서 &lt;code&gt;test&lt;/code&gt;로 시작하는 파일을 찾아서 테스트를 수행한다. &lt;a href=&#34;https://docs.python.org/3/library/unittest.html#test-discovery&#34;&gt;(참고)&lt;/a&gt; 일단 파일 이름을 test로 시작하도록 바꾼 뒤 아래와 같이 테스트해 보자.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python 날짜/시간을 문자열로 만들기 위한 규칙 정리</title>
      <link>/posts/python-datetime-string-formatting/</link>
      <pubDate>Mon, 14 May 2018 23:24:00 +0900</pubDate>
      <guid>/posts/python-datetime-string-formatting/</guid>
      <description>&lt;p&gt;파이썬을 쓰다 보면 문자열을 다루는 경우가 많은데, 문자열을 특정한 양식에 맞추어야 하는 경우가 종종 있었다. 이 경우 &lt;a href=&#34;http://pyformat.info&#34;&gt;PyFormat&lt;/a&gt;과 같은 사이트를 참조한다. 하지만 날짜나 시간을 formatting 할 때는 상세한 규칙이 정리되어 있지 않아서 이 참에 정리를 해 보려고 한다.&lt;/p&gt;&#xA;&lt;p&gt;문자열을 넣거나 숫자를 다루는 경우, PyFormat에 자세한 내용이 있어서 생략한다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 현재 시간을 datetime 객체로 받고, 이를 가지고 날짜와 시간을 문자열로 formatting 해 볼 것이다. (아래 코드 참조)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 글을 쓰는 시점에서 now의 내용은 다음과 같다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
