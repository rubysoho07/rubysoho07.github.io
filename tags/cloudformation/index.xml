<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CloudFormation on GoniGoni!</title>
    <link>/tags/cloudformation/</link>
    <description>Recent content in CloudFormation on GoniGoni!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sat, 28 Aug 2021 15:51:33 +0900</lastBuildDate><atom:link href="/tags/cloudformation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CloudFormation과 SAM을 쓰면서 겪었던 일들 모음</title>
      <link>/posts/cloudformation-sam-tmi/</link>
      <pubDate>Sat, 28 Aug 2021 15:51:33 +0900</pubDate>
      
      <guid>/posts/cloudformation-sam-tmi/</guid>
      <description>최근 인프라 구성을 CloudFormation을 이용해서 조정해 보았습니다. 그 과정에서 여러 Lambda 함수를 쓸 때는 SAM으로, 그 외의 경우는 CloudFormation을 사용했는데요.
이번 작업으로 여러 CloudFormation 스택에 흩어져 있던 리소스를 하나로 모으고, 템플릿의 관리 방식도 좀 더 관리하게 편하도록 설정할 수 있게 되었습니다.
저희 팀이 여러 IaC(Infrastructure as Code) 툴 중에 왜 SAM과 CloudFormation을 사용하는 이유는 이 문서를 참고해 주세요.
이번 글은 CloudFormation과 SAM을 쓰면서 겪었던 일들을 정리해 보려고 합니다.
SAM에서 API Gateway 정의를 SAM Template에 넣기 SAM에서 제공하는 AWS::Serverless::Api 리소스는 AWS Gateway의 REST API를 생성해 주는 기능입니다.</description>
    </item>
    
    <item>
      <title>AWS SAM에서 중첩된 스택 배포 시 유의해야 할 것들</title>
      <link>/posts/aws-sam-nested-stack/</link>
      <pubDate>Mon, 29 Jun 2020 20:58:17 +0900</pubDate>
      
      <guid>/posts/aws-sam-nested-stack/</guid>
      <description>팀에서 AWS SAM을 적극적으로 사용하고 있는데, SAM을 쓰면서 느낀 점들을 예전에 글로 남긴 적이 있었다. 그런데 SAM은 CloudFormation 스택으로 리소스를 생성하다 보니, CloudFormation의 제약 사항을 그대로 가지고 있다. 예를 들어 하나의 CloudFormation 템플릿에서 선언할 수 있는 리소스 수는 200개를 넘지 않아야 한다는 것이 대표적일 것이다. 이러한 문제를 겪으면서, 많은 리소스로 구성되어 있는 애플리케이션을 여러 스택으로 나누는 작업을 해야 했다. 이 글에서는 하나의 서버리스 애플리케이션을 여러 스택으로 나누는 문제를 해결하면서 겪었던 일들을 기록해 보려고 한다.</description>
    </item>
    
    <item>
      <title>AWS SAM을 사용하면서 느꼈던 것들</title>
      <link>/posts/retrospect-aws-sam/</link>
      <pubDate>Tue, 22 Oct 2019 21:02:00 +0900</pubDate>
      
      <guid>/posts/retrospect-aws-sam/</guid>
      <description>왜 SAM을 사용하게 되었나? 시스템 내부에서 관리하는 Lambda 함수들이 늘어나면서, 이를 관리할 방법을 찾아야 했다. 기존에는 Apex를 Lambda 함수 배포에 이용했지만, 뭔가 자동화된 방법을 찾고 싶었다.
그래서 Serverless Framework, Terraform, SAM과 같은 도구들을 검토해 봤다. 그러다가 SAM을 최종적으로 선택했는데, 이유는 다음과 같다.
  Serverless Framework는 다양한 클라우드 벤더를 지원하지만, 다른 AWS 서비스를 연동하는 데 제약이 있지 않을까? 하는 막연한 생각이 들었다. (잘 찾아보니 내가 원하는 것들은 구현 가능할 것 같더라.</description>
    </item>
    
  </channel>
</rss>
