<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>테스트 on GoniGoni!</title>
    <link>/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
    <description>Recent content in 테스트 on GoniGoni!</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 15 May 2018 22:35:00 +0900</lastBuildDate>
    <atom:link href="/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>파이썬에서 테스트 코드를 만들면서 겪은 일들</title>
      <link>/posts/python-making-test-module/</link>
      <pubDate>Tue, 15 May 2018 22:35:00 +0900</pubDate>
      <guid>/posts/python-making-test-module/</guid>
      <description>&lt;p&gt;이번 글에서는 파이썬에서 테스트 코드를 만들면서 겪었던 시행착오에 대해 소개하고자 한다. 여기서는 파이썬에 내장된 &lt;code&gt;unittest&lt;/code&gt;를 이용한다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;테스트를-수행하는-기준은&#34;&gt;테스트를 수행하는 기준은?&lt;/h3&gt;&#xA;&lt;p&gt;간단한 코드를 만들어 보자. 파일 이름은 &lt;code&gt;aaa.py&lt;/code&gt;로 저장한다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestExample&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertEqual(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 쉘에서 &lt;code&gt;python -m unittest&lt;/code&gt;를 입력하면, 아무 테스트도 실행하지 않는다.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python -m unittest&#xA;&#xA;----------------------------------------------------------------------&#xA;Ran 0 tests in 0.000s&#xA;&#xA;OK&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;왜 그럴까? &lt;code&gt;unittest&lt;/code&gt; 라이브러리는 기본적으로 실행하는 top-level 디렉터리에서 &lt;code&gt;test&lt;/code&gt;로 시작하는 파일을 찾아서 테스트를 수행한다. &lt;a href=&#34;https://docs.python.org/3/library/unittest.html#test-discovery&#34;&gt;(참고)&lt;/a&gt; 일단 파일 이름을 test로 시작하도록 바꾼 뒤 아래와 같이 테스트해 보자.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
