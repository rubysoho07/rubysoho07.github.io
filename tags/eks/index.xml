<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EKS on GoniGoni!</title>
    <link>/tags/eks/</link>
    <description>Recent content in EKS on GoniGoni!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 17 Jul 2022 21:45:26 +0900</lastBuildDate><atom:link href="/tags/eks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>eksctl로 생성한 EKS 클러스터의 리소스 살펴 보기</title>
      <link>/posts/eks-resources-with-eksctl/</link>
      <pubDate>Sun, 17 Jul 2022 21:45:26 +0900</pubDate>
      
      <guid>/posts/eks-resources-with-eksctl/</guid>
      <description>AWS에서 Kubernetes를 사용하려면 여러 방법이 있겠지만, 가장 편한 방법은 EKS 서비스를 이용하는 것이죠. EKS 클러스터를 생성하는 방법은 여러 가지가 있는데요. 이번 글에서는 eksctl이라는 프로그램을 이용해서 EKS 클러스터를 생성하는 방법을 알아보고, 어떤 리소스를 생성하는지 알아보려고 합니다.
먼저 Kubernetes 클러스터의 구조를 알아보고, EKS에서는 어떤 차이점이 있는지 알아 보겠습니다.
Kubernetes 클러스터의 구조와 EKS Kubernetes 클러스터는 다음과 같이 구성되어 있습니다.
출처: kubernetes.io
노드(Node): 컨테이너 내의 애플리케이션을 실행하는 서버들의 집합으로, 파드(Pod)는 워커 노드에서 동작합니다. 앞으로 노드 또는 워커 노드라는 말이 계속 등장할텐데, 똑같은 것으로 이해해 주시면 됩니다.</description>
    </item>
    
    <item>
      <title>EKS 내 NGINX Ingress에서 NLB와 ACM 연동 방법 살펴보기</title>
      <link>/posts/eks-nlb-acm-test/</link>
      <pubDate>Sat, 31 Jul 2021 20:08:14 +0900</pubDate>
      
      <guid>/posts/eks-nlb-acm-test/</guid>
      <description>최근 팀 내에서 외부 서비스와 연동하는 서비스가 증가하면서, 고정된 IP 주소를 요청하는 경우가 많아졌습니다.
한편, 대외 서비스가 늘어나다 보니 관리하는 서버의 수가 증가하였습니다. 그렇지만 생각보다 트래픽이 많지 않아 리소스가 낭비되는 경우가 많은데요.
이러한 상황을 겪으면서 서버의 수를 줄이고, 서비스마다 고정된 IP 주소를 제공할 방법을 찾아보게 되었습니다.
그러다가 Kubernetes와 Kubernetes의 Ingress를 적절히 활용하여 이러한 요건을 충족하는 방법을 찾아보았습니다.
이번 글은 그 과정에서 겪었던 이슈를 정리하기 위해 작성하였습니다.
EKS와 NGINX Ingress Controller 사용 저희 팀의 웹 서비스들은 Elastic Beanstalk를 주로 이용하고 있습니다.</description>
    </item>
    
  </channel>
</rss>
